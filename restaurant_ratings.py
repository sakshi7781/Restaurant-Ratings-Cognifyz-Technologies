# -*- coding: utf-8 -*-
"""Restaurant Ratings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18oNkJbHmadvJnrGepbRbyccOI3PAfD_2

**Sakshi Kharat**

**CognifyzTechnology**

**Predict Restaurant Ratings**
"""

import pandas as pd

import numpy as np

"""**Loading the Dataset**"""

from google.colab import files


uploaded = files.upload()

df = pd.read_csv('Dataset.csv')

"""**Viewing the Dataset**"""

df

df.info

"""**Viewing the Columns**"""

df.columns

df.describe

df.head(10)

df.shape

print(df)

df.iloc[2]

"""**Calculating the aggregate ratings**"""

df["Aggregate rating"].value_counts()

"""**Preprocessing The Data**

**Calculating the missing values in the dataset**
"""

df.isnull()

df.isnull().sum()

"""**There are no missing values**"""

df_cleaned = df.dropna()

print(df_cleaned)

df_cleaned.isnull().sum()

"""**Label Encoding**

**Installing the Label Encoding**
"""

from sklearn import preprocessing

label_encoder = preprocessing.LabelEncoder()

encoded_data = pd.get_dummies(df_cleaned, columns=['Cuisines'])

df_cleaned['Cuisines']= label_encoder.fit_transform(df_cleaned['Cuisines'])

df_cleaned['Cuisines'].unique()

from sklearn import preprocessing

encoded_data = pd.get_dummies(df_cleaned, columns=['Restaurant Name'])

df_cleaned['Restaurant Name']= label_encoder.fit_transform(df_cleaned['Restaurant Name'])

df_cleaned['Restaurant Name'].unique()

from sklearn import preprocessing

encoded_data = pd.get_dummies(df_cleaned, columns=['Address'])

df_cleaned['Address']= label_encoder.fit_transform(df_cleaned['Address'])

df_cleaned['Address'].unique()

categorical_vars = df.select_dtypes(include='object')

numerical_vars = df.select_dtypes(exclude='object')

"""**Normalizing Numerical Features**"""

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

normalized_numerical_vars = scaler.fit_transform(numerical_vars)

normalized_df = pd.DataFrame(normalized_numerical_vars, columns=numerical_vars.columns)

print(normalized_df.columns)

"""**Splitting the Training and testing the Data**"""

x = normalized_df.drop('Aggregate rating', axis=1)

y = normalized_df['Aggregate rating']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

"""**Training the Ligression Regression**"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(x_train, y_train)

"""**Evaluating the Model**

**Mean Squared Error**
"""

from sklearn.metrics import mean_squared_error

y_pred = model.predict(x_train)

mse = mean_squared_error(y_train, y_pred)

print(f"Train Mean Squared Error: {mse}")

y_pred = model.predict(x_test)

mse = mean_squared_error(y_pred, y_test)

print(f"Test Mean Squared Error: {mse}")

"""**R Squared**"""

from sklearn.metrics import r2_score

y_pred = model.predict(x_train)

r2 = r2_score(y_train, y_pred)

print("R-squared:", r2)

"""
**End of the code**"""